package PDASimulator.PDASetup.AlphabetPanel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

import PDASimulator.DecidableTuringMachine.DecidableTuringMachine;
import PDASimulator.MultiSelectComboBox.MultiSelectComboBox;
import PDASimulator.PDASetup.PDASetupBase.PDASetupBase;
import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;

/**
 * @author zimp
 */
public class AlphabetPanel extends PDASetupBase {

    public DecidableTuringMachine turingMachine;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField allowedCharsInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel stackCharLabel;
    private MultiSelectComboBox<String> stackCharSelect;
    // End of variables declaration//GEN-END:variables

    /**
     * Creates new form alphabetPanel
     */
    public AlphabetPanel(DecidableTuringMachine turingMachine) {
        initComponents();
        this.turingMachine = turingMachine;
        updateTuringMachineState();

    }


//    public static void main(String[] args) {
//        FlatRobotoFont.install();
//        UIManager.put("defaultFont", new Font(FlatRobotoFont.FAMILY, Font.PLAIN, 13));
//        FlatMacLightLaf.setup();
//        JFrame frame = new JFrame("Alphabet Panel");
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.add(new AlphabetPanel());
//        frame.pack();
//        frame.setVisible(true);
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        allowedCharsInput = new javax.swing.JTextField();
        stackCharLabel = new javax.swing.JLabel();
        stackCharSelect = new MultiSelectComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("<html>Allowed Characters (Σ):<br>E.G. abc, 01, 1 etc</html>");
        jLabel1.setPreferredSize(new java.awt.Dimension(160, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 6, 20);
        add(jLabel1, gridBagConstraints);

        allowedCharsInput.setPreferredSize(new java.awt.Dimension(160, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 6, 20);
        add(allowedCharsInput, gridBagConstraints);
        allowedCharsInput.getDocument().addDocumentListener(new EnableStackCharsOnTypeDocumentListener());

        stackCharLabel.setText("Stack characters (Γ):");
        stackCharLabel.setEnabled(false);
        stackCharLabel.setPreferredSize(new java.awt.Dimension(160, 35));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 6, 20);
        add(stackCharLabel, gridBagConstraints);

        stackCharSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "item1", "item2" }));
        stackCharSelect.setEnabled(false);
        stackCharSelect.setPreferredSize(new java.awt.Dimension(160, 35));
        stackCharSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stackCharSelectActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 20, 20);
        add(stackCharSelect, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Monaspace Argon", 1, 20)); // NOI18N
        jLabel3.setText("Allowed and Stack Characters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 20);
        add(jLabel3, gridBagConstraints);

        jLabel2.setText("<html><center>Stack Initial Character: $<br>(Unchangable)</center></hmtl>");
        jLabel2.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(6, 20, 6, 20);
        add(jLabel2, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void stackCharSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stackCharSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stackCharSelectActionPerformed

    @Override
    public Boolean allowNext(Boolean showErrorDialog) {
        if (this.stackCharSelect.getSelectedItems().isEmpty() || this.allowedCharsInput.getText().isBlank()) {
            if (showErrorDialog) {
                JOptionPane.showMessageDialog(this, "Please enter the input and stack alphabet before proceeding.", "Error", JOptionPane.ERROR_MESSAGE);
            }
            return false;
        }
        this.turingMachine.inputAlphabet.clear();
        this.turingMachine.inputAlphabet.addAll(List.of(allowedCharsInput.getText().split("")));
        this.turingMachine.stackAlphabet.clear();
        this.turingMachine.stackAlphabet.add(DecidableTuringMachine.initialStackSymbol);
        this.turingMachine.stackAlphabet.addAll(stackCharSelect.getSelectedItems());
        return true;
    }

    @Override
    public void updateTuringMachineState() {
        if (!this.turingMachine.inputAlphabet.isEmpty()) {
            if (!this.stackCharSelect.getSelectedItems().isEmpty()) {
                this.stackCharSelect.clearSelectedItems();
            }
            this.allowedCharsInput.setText("");
            StringBuilder builder = new StringBuilder();
            for (var i : this.turingMachine.inputAlphabet) {
                builder.append(i);
            }
            this.allowedCharsInput.setText(builder.toString());
            this.stackCharSelect.setSelectedItems(Collections.singletonList(this.turingMachine.stackAlphabet));
        }
    }

    private class EnableStackCharsOnTypeDocumentListener implements DocumentListener {

        @Override
        public void insertUpdate(DocumentEvent e) {
            updateState();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateState();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateState();
        }

        private void updateState() {
            var string = allowedCharsInput.getText();
            if (string.isBlank()) {
                stackCharLabel.setEnabled(false);
                stackCharSelect.setEnabled(false);
                return;
            } else {
                stackCharLabel.setEnabled(true);
                stackCharSelect.setEnabled(true);
            }


            String withoutLastChar = string.substring(0, string.length() - 1);
            if (withoutLastChar.contains(string.substring(string.length() - 1))) {
                string = withoutLastChar;
                SwingUtilities.invokeLater(() -> allowedCharsInput.setText(withoutLastChar));
            }

            var chars = new HashSet<>(List.of(string.split("")));
            if (stackCharSelect.getItemCount() > 0) {
                stackCharSelect.removeAllItems();
            }
            chars.forEach(stackCharSelect::addItem);


        }
    }
}
